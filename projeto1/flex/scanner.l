%{
#include <string>
#include <iostream>
#include "parser.h" /* Generated by Bison */

extern int yylineno;
void yyerror(const char* s, ...);
%}

%option noyywrap nodefault yylineno

num -?([0-9]+)/*\.?[0-9]*|\.[0-9]+)(e-?[0-9]+)?*/
var ([a-zA-Z][a-zA-Z0-9_]*)
nonacceptable [^-\+\*\\(\)/=\n{num}{var} \t]+


%%

[ \t]               ; //ignores spaces
{var}               {yylval.var = yytext[0]; return T_VAR;}
{num} 				{yylval.value = std::atof(yytext); return T_REAL;}
/*{num}"i"			{yytext[yyleng-1] = '\0';
				     yylval.value = std::atof(yytext); return T_IMAG;}*/
"+"                 {return T_PLUS;} /*special character with " "*/
"-"					{return T_MINUS;}
\*                  {return T_TIMES;} /* special character with \ */
"/"					{return T_DIVIDE;}
"("					{return T_OPAR;}
")"					{return T_CPAR;}
"="                 {return T_ASSIGN;}
\n                  {return T_NL;}
{nonacceptable}	    {yyerror("unknown symbol %s\n", *yytext);} /*complains about every unknown character*/

%%

void yyerror(const char *s, ...){
    va_list ap;
    va_start(ap, s);
    std::fprintf(stderr, "[Line %d] lexical error: ", yylineno);
    std::vfprintf(stderr, s, ap);
}
