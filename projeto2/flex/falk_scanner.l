%{
#include <string>
#include "parser.h" /* Generated by Bison */

extern int yylineno;
void yyerror(const char* s, ...);
%}

%option noyywrap nodefault yylineno

var_decl var
arr_decl array
mat_decl matrix

real_type real
complex_type complex 
bool_type bool 

real [0-9]+|[0-9]*\.[0-9]+
complex {real}i
bool_literal true|false
name [a-zA-Z][a-zA-Z0-9_]*

if_literal if
else_literal else
for_literal for
while_literal while

end_of_command ;|\n

%%

[ \t]				;

{real_type}         { Type type(PrimitiveType::REAL); yylval.type = type; return T_TYPE; }
{complex_type}      { Type type(PrimitiveType::COMPLEX); yylval.type = type; return T_TYPE; }
{bool_type}         { Type type(PrimitiveType::BOOL); yylval.type = type; return T_TYPE; }

{var_decl}			{ return T_VAR; }
{arr_decl}			{ return T_ARRAY; }
{mat_decl}			{ return T_MATRIX; }

{real}       		{ Type type(PrimitiveType::REAL); yylval.value = {strdup(yytext), type}; return T_REAL; }
{complex}     		{ Type type(PrimitiveType::COMPLEX); yylval.value = {strdup(yytext), type}; return T_COMPLEX; }
{bool_literal}      { Type type(PrimitiveType::BOOL); yylval.value = {strdup(yytext), type}; return T_BOOL; }

{if_literal}        { return T_IF; }
{else_literal}	 	{ return T_ELSE; }

{for_literal}       { return T_FOR; }
{while_literal}     { return T_WHILE; }
in 					{ return T_IN; }
return              { return T_RET; }
function            { return T_FUN; }

{name}              { yylval.var = strdup(yytext); return T_ID; }

typeof				{ return T_TYPEOF; }

"+"                 { yylval.operation = Operator::PLUS; return T_PLUS; }
"-"                 { yylval.operation = Operator::MINUS; return T_MINUS; }
"*"                 { yylval.operation = Operator::TIMES; return T_TIMES; }
"/"                 { yylval.operation = Operator::DIVIDE; return T_DIVIDE; }
"**"                { yylval.operation = Operator::POWER; return T_POWER; }
"%"                 { yylval.operation = Operator::MOD; return T_MOD; }
"=="                { yylval.operation = Operator::EQUAL; return T_COMPARISON; }
"!="                { yylval.operation = Operator::NOT_EQUAL; return T_COMPARISON; }
">"                 { yylval.operation = Operator::GREATER_THAN; return T_COMPARISON; }
"<"                 { yylval.operation = Operator::LESS_THAN; return T_COMPARISON; }
">="                { yylval.operation = Operator::GREATER_EQUAL_THAN; return T_COMPARISON; }
"<="                { yylval.operation = Operator::LESS_EQUAL_THAN; return T_COMPARISON; }
"&"                 { yylval.operation = Operator::AND; return T_AND; }
"|"                 { yylval.operation = Operator::OR; return T_OR; }
"!"                 { yylval.operation = Operator::NOT; return T_NOT; }

"("                 { return T_OPAR; }
")"                 { return T_CPAR; }
"["                 { return T_OINDEX; }
"]"                 { return T_CINDEX; }
":"					{ return T_OBLOCK; }
"."					{ return T_CBLOCK; }
"="                 { return T_ASSIGN; }
"+="                { return T_ASSIGN_PLUS; }
"-="                { return T_ASSIGN_MINUS; }
"*="                { return T_ASSIGN_TIMES; }
"/="                { return T_ASSIGN_DIVIDE; }
"**="               { return T_ASSIGN_POWER; }
"%="                { return T_ASSIGN_MOD; }
","                 { return T_COMMA; }
{end_of_command}	{ return T_EOC; }

//[^\n]*\n					;
/\*([^\*]|\*[^/])*\*/		;

{nonacceptable}     { lexical_error("unknown symbol %s\n", strdup(yytext)); }

%%

template<typename... Args>
void lexical_error(Args... args) {
    std::fprintf(stderr, "[Line %d] lexical error: ", yylineno);
    std::fprintf(stderr, args...);
}

void yyerror(const char *s, ...){
    va_list ap;
    va_start(ap, s);
    std::fprintf(stderr, "[Line %d] ", yylineno);
    std::vfprintf(stderr, s, ap);
    std::cout << std::endl;
}
